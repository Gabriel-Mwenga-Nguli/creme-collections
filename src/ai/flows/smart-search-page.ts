// This file is generated by Firebase Genkit.
// prettier-ignore
'use server';
/**
 * @fileOverview Smart search page flow that uses AI to search for products by name or description.
 *
 * - smartSearch - A function that handles the smart search process.
 * - SmartSearchInput - The input type for the smartSearch function.
 * - SmartSearchOutput - The return type for the smartSearch function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const SmartSearchInputSchema = z.object({
  query: z.string().describe('The search query provided by the user.'),
  filters: z.string().optional().describe('Optional filters to apply to the search.'),
});
export type SmartSearchInput = z.infer<typeof SmartSearchInputSchema>;

const SmartSearchOutputSchema = z.object({
  products: z.array(
    z.object({
      name: z.string().describe('The name of the product.'),
      description: z.string().describe('A short description of the product.'),
      imageUrl: z.string().describe('URL of the product image.'),
      price: z.number().describe('The price of the product.'),
    })
  ).describe('A list of products that match the search query and filters.'),
});
export type SmartSearchOutput = z.infer<typeof SmartSearchOutputSchema>;

export async function smartSearch(input: SmartSearchInput): Promise<SmartSearchOutput> {
  return smartSearchFlow(input);
}

const smartSearchPrompt = ai.definePrompt({
  name: 'smartSearchPrompt',
  input: {schema: SmartSearchInputSchema},
  output: {schema: SmartSearchOutputSchema},
  prompt: `You are a search assistant helping users find products.

  The user has provided the following search query: {{{query}}}

  {{#if filters}}
  The user has also provided the following filters: {{{filters}}}
  {{/if}}

  Based on the query and filters, return a list of products that match the search criteria.
  Make sure to include product name, description, imageUrl and price in your output.
  Return the products in JSON format.
  `,
});

const smartSearchFlow = ai.defineFlow(
  {
    name: 'smartSearchFlow',
    inputSchema: SmartSearchInputSchema,
    outputSchema: SmartSearchOutputSchema,
  },
  async input => {
    const {output} = await smartSearchPrompt(input);
    return output!;
  }
);
