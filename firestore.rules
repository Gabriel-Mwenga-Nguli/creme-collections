
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Products: Public read is essential for e-commerce.
    // Write access should be restricted to admin users in production.
    match /products/{productId} {
      allow read: if true;
      // Example for admin-only write, adjust as per your admin setup:
      // allow write: if request.auth != null && request.auth.token.admin == true;
      // Using time-based rule for now as a fallback from your previous config:
      allow write: if request.time < timestamp.date(2025, 7, 17);
    }

    // User profiles:
    match /users/{userId} {
      // Allow a user to create their own document after signing up
      allow create: if request.auth != null && request.auth.uid == userId;
      // Allow an authenticated user to read and update their own profile
      allow read, update: if request.auth != null && request.auth.uid == userId;
      // Deletion might be restricted or handled by admin logic
      // allow delete: if request.auth != null && (request.auth.uid == userId || request.auth.token.admin == true);
    }

    // User subcollections (wishlist, addresses, messages, etc.):
    // User can manage their own items within these subcollections.
    match /users/{userId}/{subcollection}/{documentId} {
      allow read, write, delete: if request.auth != null && request.auth.uid == userId;
    }
    
    // Orders:
    match /orders/{orderId} {
      // Authenticated users can create orders for themselves.
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      // Users can read their own orders. Admins/Shop Managers might need broader read access.
      allow read: if request.auth != null && resource.data.userId == request.auth.uid;
      //   || (request.auth.token.admin == true || request.auth.token.shopManager == true) // Example for admin/manager read
      
      // Updating/Deleting orders should be highly restricted, typically admin/manager only,
      // or for specific status updates by users (e.g., cancelling a pending order).
      // Using time-based rule for now as a fallback:
      allow update, delete: if request.time < timestamp.date(2025, 7, 17);
      // Example for admin-only update/delete:
      // allow update, delete: if request.auth != null && request.auth.token.admin == true;
    }

    // Generic fallback - this is very broad.
    // Consider removing or making more restrictive if all specific paths are covered.
    // If kept, ensure it's what you intend for any unlisted paths.
    match /{document=**} {
      allow read, write: if request.time < timestamp.date(2025, 7, 17);
    }
  }
}
