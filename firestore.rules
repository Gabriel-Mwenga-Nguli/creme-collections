
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Products: Publicly readable, only admins can write (example for write)
    match /products/{productId} {
      allow read: if true;
      // Example: allow write: if request.auth != null && request.auth.token.admin == true;
      // For now, falling back to the global time-based rule for writes.
      // Consider making this more specific for production.
      allow write: if request.time < timestamp.date(2025, 7, 17); // Temporary write rule
    }

    // User specific data: Only the authenticated user can read/write their own data.
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;

      // Wishlist: User can manage their own wishlist
      match /wishlist/{itemId} {
        allow read, write, delete: if request.auth != null && request.auth.uid == userId;
      }

      // Addresses: User can manage their own addresses
      match /addresses/{addressId} {
        allow read, write, delete: if request.auth != null && request.auth.uid == userId;
      }
      
      // Messages: User can manage their own messages
      match /messages/{messageId} {
        allow read, write, delete: if request.auth != null && request.auth.uid == userId;
      }
    }

    // Orders:
    // - Authenticated users can create orders (write).
    // - Users can only read their own orders.
    // - Admins (example) could potentially read all orders or update status.
    match /orders/{orderId} {
      allow create: if request.auth != null; // Any authenticated user can create an order
      allow read: if request.auth != null && request.auth.uid == resource.data.userId;
                   // Example admin read access: || (request.auth != null && request.auth.token.admin == true);
      // For updates (like status by admin), use specific rules.
      // allow update: if request.auth != null && request.auth.token.admin == true; // Example for admin
      // Temporary write/update rule for now
      allow write, update: if request.time < timestamp.date(2025, 7, 17);
    }

    // Default rule for any other paths (as per your existing setup)
    // This is a broad rule and should be refined for production for paths not explicitly covered above.
    match /{document=**} {
      allow read, write: if request.time < timestamp.date(2025, 7, 17);
    }
  }
}
