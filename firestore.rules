
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Products: Publicly readable.
    // Write access for products should be restricted (e.g., to admins) in a production app.
    // For now, write access will fall back to the global time-based rule if no specific admin rule is set.
    match /products/{productId} {
      allow read: if true;
      // Example for admin-only writes (requires custom claims setup or a user roles system):
      // allow write: if request.auth != null && request.auth.token.admin == true;
      // If not using admin-only writes yet, you might rely on the fallback or define a temporary write rule:
      allow write: if request.time < timestamp.date(2025, 7, 17); // Temporary, from user's original rules
    }

    // User-specific data:
    // Users can read and write their own documents in their own 'users' subcollections.
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;

      // Wishlist subcollection within a user's document
      match /wishlist/{itemId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }

      // Addresses subcollection within a user's document
      match /addresses/{addressId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }

      // Messages subcollection (user-specific sent/received messages)
      match /messages/{messageId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
        // allow create: if request.auth != null && request.auth.uid == request.resource.data.senderId;
      }
    }

    // Orders:
    // Users can create their own orders.
    // Users can read their own orders.
    // Admin users should be able to read/update all orders.
    match /orders/{orderId} {
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow read: if request.auth != null && (
                    (resource.data.userId == request.auth.uid) ||
                    (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true) // Example admin check
                  );
      allow update: if request.auth != null && (
                      (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true)
                      // Or allow user to update specific fields like 'status' if it's 'Cancelled' by them
                      // && request.resource.data.status == 'Cancelled' && resource.data.userId == request.auth.uid
                    );
      // Delete might be admin only or restricted by time
      allow delete: if request.time < timestamp.date(2025, 7, 17); // Temporary or admin only
    }

    // Fallback for any other paths not explicitly defined, using the user's original time-based rule.
    // This is a general catch-all and should ideally be removed or made more specific as your app matures.
    // It's placed last so more specific rules above take precedence.
    match /{document=**} {
      allow read, write: if request.time < timestamp.date(2025, 7, 17);
    }
  }
}
